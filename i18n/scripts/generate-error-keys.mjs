import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES Module equivalents for __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Define the path to the source JSON file and the output TypeScript file.
const sourcePath = path.resolve(__dirname, '../../translations/en.json');
const outputPath = path.resolve(__dirname, '../../src/i18n/i18n.keys.ts');

/**
 * Recursively flattens a nested object into an array of dot-notation keys.
 * @param {object} obj The object to flatten.
 * @param {string} parentKey The key of the parent object, used for building the nested key.
 * @returns {string[]} An array of flattened keys.
 */
function flattenKeys(obj, parentKey = '') {
	let keys = [];

	for (const key in obj) {
		if (Object.prototype.hasOwnProperty.call(obj, key)) {
			const newKey = parentKey ? `${parentKey}.${key}` : key;
			if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
				keys = keys.concat(flattenKeys(obj[key], newKey));
			} else {
				keys.push(newKey);
			}
		}
	}
	return keys;
}

try {
	// Read and parse the source JSON file.
	const fileContent = fs.readFileSync(sourcePath, 'utf-8');
	const translations = JSON.parse(fileContent);

	// Flatten the keys from the JSON object.
	const allKeys = flattenKeys(translations);

	// We are only interested in the error keys for this specific task.
	const errorKeys = allKeys.filter((key) => key.startsWith('errors.'));

	// Format the keys into a TypeScript union type.
	const typeContent = `// This file is auto-generated by scripts/generate-i18n-keys.mjs. Do not edit manually.\n\nexport type ErrorKeys = \n  | '${errorKeys.join("'\n  | '")}';`;

	// Ensure the output directory exists.
	const outputDir = path.dirname(outputPath);
	if (!fs.existsSync(outputDir)) {
		fs.mkdirSync(outputDir, { recursive: true });
	}

	// Write the generated type to the output file.
	fs.writeFileSync(outputPath, typeContent, 'utf-8');

	console.log(`✅ Successfully generated type definitions for ${errorKeys.length}.`);
	console.log(`✅ Output file created at: ${outputPath}`);
} catch (error) {
	console.error('❌ An error occurred while generating i18n key types:', error);
	process.exit(1);
}
